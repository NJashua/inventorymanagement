{
    "info": {
        "_postman_id": "8a62b433-628a-4f85-a960-8e18f72f69aa",
        "name": "InventoryMangement",
        "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
        "_exporter_id": "34381864",
        "_collection_link": "https://nj3333.postman.co/workspace/NJ-Workspace~cf2d6870-6eb7-4a66-8bd8-f4405262c93b/collection/34381864-8a62b433-628a-4f85-a960-8e18f72f69aa?action=share&source=collection_link&creator=34381864"
    },
    "item": [
        {
            "name": "TEST",
            "item": [
                {
                    "name": "IM search testcase",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "// Check if the status code is 200\r",
                                    "pm.test(\"Status code is 200\", function () {\r",
                                    "    pm.response.to.have.status(200);\r",
                                    "});\r",
                                    "\r",
                                    "// Check if the response is a JSON object\r",
                                    "pm.test(\"Response is a JSON object\", function () {\r",
                                    "    pm.response.to.be.json;\r",
                                    "});\r",
                                    "\r",
                                    "// Check if the response contains the products and locations arrays                                                                         \r",
                                    "pm.test(\"Response contains products and locations arrays\", function () {\r",
                                    "    var jsonData = pm.response.json();\r",
                                    "    pm.expect(jsonData).to.have.property('products').that.is.an('array');\r",
                                    "    pm.expect(jsonData).to.have.property('locations').that.is.an('array');\r",
                                    "});\r",
                                    "\r",
                                    "// Check if the products array is not empty\r",
                                    "pm.test(\"Products array is not empty\", function () {\r",
                                    "    var jsonData = pm.response.json();\r",
                                    "    pm.expect(jsonData.products).to.be.an('array').that.is.not.empty;\r",
                                    "});\r",
                                    "\r",
                                    "// Check if the locations array is not empty\r",
                                    "pm.test(\"Locations array is not empty\", function () {\r",
                                    "    var jsonData = pm.response.json();\r",
                                    "    pm.expect(jsonData.locations).to.be.an('array').that.is.not.empty;\r",
                                    "});\r",
                                    "\r",
                                    "// checking if each product in the products array has specific fields\r",
                                    "pm.test(\"Each product has required fields...:)\", function(){\r",
                                    "    var jsonData = pm.response.json();\r",
                                    "    pm.expect(jsonData.products).to.be.an('array').that.is.not.empty;\r",
                                    "    jsonData.products.forEach(function(product){\r",
                                    "        pm.expect(product).to.have.property('product_name')\r",
                                    "        pm.expect(product).to.have.property('selling_price')\r",
                                    "        pm.expect(product).to.have.property('expiry_date')\r",
                                    "        pm.expect(product).to.have.property('description')\r",
                                    "        pm.expect(product).to.have.property('location_id')\r",
                                    "        pm.expect(product).to.have.property('number_of_product_purchased')\r",
                                    "        pm.expect(product).to.have.property('reorder_level')\r",
                                    "        pm.expect(product).to.have.property('selling_price')\r",
                                    "        pm.expect(product).to.have.property('supplier_id')\r",
                                    "        pm.expect(product).to.have.property('supplier_name')\r",
                                    "        pm.expect(product).to.have.property('supplier_name')\r",
                                    "        pm.expect(product).to.have.property('category')\r",
                                    "    });\r",
                                    "});\r",
                                    "\r",
                                    "// check if each location in the locations array has specific fields\r",
                                    "pm.test(\"Each location has required fields\", function(){\r",
                                    "    var jsonData = pm.response.json();\r",
                                    "    pm.expect(jsonData.locations).to.be.an('array').that.is.not.empty;\r",
                                    "    jsonData.locations.forEach(function(location){\r",
                                    "        pm.expect(location).to.have.property('zone');\r",
                                    "        pm.expect(location).to.have.property('aisle');\r",
                                    "        pm.expect(location).to.have.property('shelf');\r",
                                    "        pm.expect(location).to.have.property('bin');\r",
                                    "    });\r",
                                    "});\r",
                                    "\r",
                                    "// checking if location instructions are present or not when both product and locations are availabale...:)\r",
                                    "pm.test(\"Location instructions are present when applicable\", function(){\r",
                                    "    var jsonData = pm.response.json();\r",
                                    "    if(jsonData.products.length >0 && jsonData.location.length>0){\r",
                                    "        pm.expect(jsonData).to.have.property('location').that.is.a('string').that.is.not.empty;\r",
                                    "    }\r",
                                    "});\r",
                                    "\r",
                                    "\r",
                                    "pm.test(\"Handles invalid input gracefully\", function () {\r",
                                    "    pm.sendRequest({\r",
                                    "        url: \"https://nventory.azurewebsites.net/search?search_term=invalidinput\",\r",
                                    "        method: \"GET\"\r",
                                    "    }, function (err, res) {\r",
                                    "        // Check if the response was received\r",
                                    "        pm.expect(res).to.have.property('code', 200);\r",
                                    "        \r",
                                    "        var jsonData = res.json();\r",
                                    "        pm.expect(jsonData.products).to.be.an('array').that.is.empty;\r",
                                    "        pm.expect(jsonData.locations).to.be.an('array').that.is.empty;\r",
                                    "    });\r",
                                    "});\r",
                                    "\r",
                                    "// "
                                ],
                                "type": "text/javascript",
                                "packages": {}
                            }
                        },
                        {
                            "listen": "prerequest",
                            "script": {
                                "packages": {},
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "header": [],
                        "url": {
                            "raw": "https://nventory.azurewebsites.net/search?search_term=CoolMaster",
                            "protocol": "https",
                            "host": [
                                "nventory",
                                "azurewebsites",
                                "net"
                            ],
                            "path": [
                                "search"
                            ],
                            "query": [
                                {
                                    "key": "search_term",
                                    "value":"CoolMaster"
                                }
                            ]
                        },
                        "description": "Search for products and locations with the term 'CoolMaster'"
                    },
                    "response": []
                }
            ]
        },
        {
            "name": "Product Management",
            "item": [
                {
                    "name": "Create Product",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "// Check if the status code is 201 (Created)",
                                    "pm.test(\"Status code is 201\", function () {",
                                    "    pm.response.to.have.status(201);",
                                    "});",
                                    "",
                                    "// Check if the response is a JSON object",
                                    "pm.test(\"Response is a JSON object\", function () {",
                                    "    pm.response.to.be.json;",
                                    "});",
                                    "",
                                    "// Check if the response contains the newly created product",
                                    "pm.test(\"Response contains the created product\", function () {",
                                    "    var jsonData = pm.response.json();",
                                    "    pm.expect(jsonData).to.have.property('product_name');",
                                    "    pm.expect(jsonData).to.have.property('selling_price');",
                                    "    pm.expect(jsonData).to.have.property('expiry_date');",
                                    "    pm.expect(jsonData).to.have.property('description');",
                                    "    pm.expect(jsonData).to.have.property('location_id');",
                                    "    pm.expect(jsonData).to.have.property('number_of_product_purchased');",
                                    "    pm.expect(jsonData).to.have.property('reorder_level');",
                                    "    pm.expect(jsonData).to.have.property('supplier_id');",
                                    "    pm.expect(jsonData).to.have.property('supplier_name');",
                                    "    pm.expect(jsonData).to.have.property('category');",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "method": "POST",
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": JSON.stringify({
                                "product_name": "CoolMaster 3000",
                                "selling_price": 299.99,
                                "expiry_date": "2024-12-31",
                                "description": "High-performance cooling unit",
                                "location_id": "loc123",
                                "number_of_product_purchased": 50,
                                "reorder_level": 10,
                                "supplier_id": "sup123",
                                "supplier_name": "CoolingSuppliers Inc.",
                                "category": "Cooling Units"
                            })
                        },
                        "url": {
                            "raw": "https://nventory.azurewebsites.net/products",
                            "protocol": "https",
                            "host": [
                                "nventory",
                                "azurewebsites",
                                "net"
                            ],
                            "path": [
                                "products"
                            ]
                        },
                        "description": "Create a new product in the inventory"
                    },
                    "response": []
                }
            ]
        },
        {
            "name": "Location Management",
            "item": [
                {
                    "name": "Create Location",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "// Check if the status code is 201 (Created)",
                                    "pm.test(\"Status code is 201\", function () {",
                                    "    pm.response.to.have.status(201);",
                                    "});",
                                    "",
                                    "// Check if the response is a JSON object",
                                    "pm.test(\"Response is a JSON object\", function () {",
                                    "    pm.response.to.be.json;",
                                    "});",
                                    "",
                                    "// Check if the response contains the newly created location",
                                    "pm.test(\"Response contains the created location\", function () {",
                                    "    var jsonData = pm.response.json();",
                                    "    pm.expect(jsonData).to.have.property('zone');",
                                    "    pm.expect(jsonData).to.have.property('aisle');",
                                    "    pm.expect(jsonData).to.have.property('shelf');",
                                    "    pm.expect(jsonData).to.have.property('bin');",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "method": "POST",
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": JSON.stringify({
                                "zone": "Zone A",
                                "aisle": "Aisle 5",
                                "shelf": "Shelf 3",
                                "bin": "Bin 8"
                            })
                        },
                        "url": {
                            "raw": "https://nventory.azurewebsites.net/locations",
                            "protocol": "https",
                            "host": [
                                "nventory",
                                "azurewebsites",
                                "net"
                            ],
                            "path": [
                                "locations"
                            ]
                        },
                        "description": "Create a new location in the inventory"
                    },
                    "response": []
                }
            ]
        }
    ]
}
