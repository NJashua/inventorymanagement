{
    "info": {
        "_postman_id": "8a62b433-628a-4f85-a960-8e18f72f69aa",
        "name": "InventoryManagement",
        "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
        "_exporter_id": "34381864",
        "_collection_link": "https://nj3333.postman.co/workspace/NJ-Workspace~cf2d6870-6eb7-4a66-8bd8-f4405262c93b/collection/34381864-8a62b433-628a-4f85-a960-8e18f72f69aa?action=share&source=collection_link&creator=34381864"
    },
    "item": [
        {
            "name": "TEST",
            "item": [
                {
                    "name": "IM search testcase",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "// Check if the status code is 200 or 404 for invalid input\r",
                                    "pm.test(\"Status code is 200 or 404\", function () {\r",
                                    "    pm.expect(pm.response.code).to.be.oneOf([200, 404]);\r",
                                    "});\r",
                                    "\r",
                                    "// Check if the response is a JSON object\r",
                                    "pm.test(\"Response is a JSON object\", function () {\r",
                                    "    if(pm.response.code === 200) {\r",
                                    "        pm.response.to.be.json;\r",
                                    "    }\r",
                                    "});\r",
                                    "\r",
                                    "// Check if the response contains the products and locations arrays\r",
                                    "pm.test(\"Response contains products and locations arrays\", function () {\r",
                                    "    if(pm.response.code === 200) {\r",
                                    "        var jsonData = pm.response.json();\r",
                                    "        pm.expect(jsonData).to.have.property('products').that.is.an('array');\r",
                                    "        pm.expect(jsonData).to.have.property('locations').that.is.an('array');\r",
                                    "    }\r",
                                    "});\r",
                                    "\r",
                                    "// Check if the products array is not empty\r",
                                    "pm.test(\"Products array is not empty\", function () {\r",
                                    "    if(pm.response.code === 200) {\r",
                                    "        var jsonData = pm.response.json();\r",
                                    "        pm.expect(jsonData.products).to.be.an('array').that.is.not.empty;\r",
                                    "    }\r",
                                    "});\r",
                                    "\r",
                                    "// Check if the locations array is not empty\r",
                                    "pm.test(\"Locations array is not empty\", function () {\r",
                                    "    if(pm.response.code === 200) {\r",
                                    "        var jsonData = pm.response.json();\r",
                                    "        pm.expect(jsonData.locations).to.be.an('array').that.is.not.empty;\r",
                                    "    }\r",
                                    "});\r",
                                    "\r",
                                    "// checking if each product in the products array has specific fields\r",
                                    "pm.test(\"Each product has required fields\", function(){\r",
                                    "    if(pm.response.code === 200) {\r",
                                    "        var jsonData = pm.response.json();\r",
                                    "        pm.expect(jsonData.products).to.be.an('array').that.is.not.empty;\r",
                                    "        jsonData.products.forEach(function(product){\r",
                                    "            pm.expect(product).to.have.property('product_name');\r",
                                    "            pm.expect(product).to.have.property('selling_price');\r",
                                    "            pm.expect(product).to.have.property('expiry_date');\r",
                                    "            pm.expect(product).to.have.property('description');\r",
                                    "            pm.expect(product).to.have.property('location_id');\r",
                                    "            pm.expect(product).to.have.property('number_of_product_purchased');\r",
                                    "            pm.expect(product).to.have.property('reorder_level');\r",
                                    "            pm.expect(product).to.have.property('selling_price');\r",
                                    "            pm.expect(product).to.have.property('supplier_id');\r",
                                    "            pm.expect(product).to.have.property('supplier_name');\r",
                                    "            pm.expect(product).to.have.property('category');\r",
                                    "        });\r",
                                    "    }\r",
                                    "});\r",
                                    "\r",
                                    "// check if each location in the locations array has specific fields\r",
                                    "pm.test(\"Each location has required fields\", function(){\r",
                                    "    if(pm.response.code === 200) {\r",
                                    "        var jsonData = pm.response.json();\r",
                                    "        pm.expect(jsonData.locations).to.be.an('array').that.is.not.empty;\r",
                                    "        jsonData.locations.forEach(function(location){\r",
                                    "            pm.expect(location).to.have.property('zone');\r",
                                    "            pm.expect(location).to.have.property('aisle');\r",
                                    "            pm.expect(location).to.have.property('shelf');\r",
                                    "            pm.expect(location).to.have.property('bin');\r",
                                    "        });\r",
                                    "    }\r",
                                    "});\r",
                                    "\r",
                                    "// checking if location instructions are present or not when both product and locations are available\r",
                                    "pm.test(\"Location instructions are present when applicable\", function(){\r",
                                    "    if(pm.response.code === 200) {\r",
                                    "        var jsonData = pm.response.json();\r",
                                    "        if(jsonData.products.length > 0 && jsonData.locations.length > 0){\r",
                                    "            pm.expect(jsonData).to.have.property('location_instructions').that.is.a('string').that.is.not.empty;\r",
                                    "        }\r",
                                    "    }\r",
                                    "});\r",
                                    "\r",
                                    "pm.test(\"Handles invalid input gracefully\", function () {\r",
                                    "    pm.sendRequest({\r",
                                    "        url: \"https://nventory.azurewebsites.net/search?search_term=invalidinput\",\r",
                                    "        method: \"GET\"\r",
                                    "    }, function (err, res) {\r",
                                    "        // Check if the response was received\r",
                                    "        pm.expect(res).to.have.property('code', 200);\r",
                                    "        \r",
                                    "        var jsonData = res.json();\r",
                                    "        pm.expect(jsonData.products).to.be.an('array').that.is.empty;\r",
                                    "        pm.expect(jsonData.locations).to.be.an('array').that.is.empty;\r",
                                    "    });\r",
                                    "});"
                                ],
                                "type": "text/javascript",
                                "packages": {}
                            }
                        },
                        {
                            "listen": "prerequest",
                            "script": {
                                "exec": [ "" ],
                                "type": "text/javascript",
                                "packages": {}
                            }
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "header": [],
                        "url": {
                            "raw": "https://nventory.azurewebsites.net/search?search_term=CoolMaster",
                            "protocol": "https",
                            "host": [ "nventory", "azurewebsites", "net" ],
                            "path": [ "search" ],
                            "query": [
                                { "key": "search_term", "value": "CoolMaster" }
                            ]
                        }
                    },
                    "response": []
                },
                {
                    "name": "IM displayproducts testcase",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "// Extract JSON data from response\r",
                                    "var jsonData = pm.response.json();\r",
                                    "\r",
                                    "// Check if the status code is 200\r",
                                    "pm.test(\"Status code is 200\", function(){\r",
                                    "    pm.response.to.have.status(200);\r",
                                    "});\r",
                                    "\r",
                                    "// Check if the response contains all expected fields for each product\r",
                                    "pm.test(\"Response contains all expected fields for each product\", function(){\r",
                                    "    jsonData.forEach(function(product){\r",
                                    "        pm.expect(product).to.have.all.keys('supplier_id', 'supplier_name', 'product_name', 'description', 'number_of_product_purchased', 'date_of_purchase', 'category', 'quantity_available', 'unit_cost', 'selling_price', 'reorder_level', 'expiry_date', 'location_id');\r",
                                    "    });\r",
                                    "});\r",
                                    "\r",
                                    "// Check if the products array is not empty\r",
                                    "pm.test(\"Products array is not empty\", function(){\r",
                                    "    pm.expect(jsonData).to.be.an('array').that.is.not.empty;\r",
                                    "});"
                                ],
                                "type": "text/javascript",
                                "packages": {}
                            }
                        },
                        {
                            "listen": "prerequest",
                            "script": {
                                "exec": [ "" ],
                                "type": "text/javascript",
                                "packages": {}
                            }
                        }
                    ],
			"request": {
                        "method": "GET",
                        "header": [],
                        "url": {
                            "raw": "https://nventory.azurewebsites.net/products",
                            "protocol": "https",
                            "host": [ "nventory", "azurewebsites", "net" ],
                            "path": [ "products" ]
                        }
                    },
                    "response": []
                }
            ]
        }
    ]
}
