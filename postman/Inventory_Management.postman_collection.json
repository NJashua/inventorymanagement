{
    "name": "IM search testcase",
    "event": [
        {
            "listen": "test",
            "script": {
                "exec": [
                    "// Check if the status code is 200, 404, or 500 for server errors",
                    "pm.test(\"Status code is 200, 404, or 500\", function () {",
                    "    pm.expect(pm.response.code).to.be.oneOf([200, 404, 500]);",
                    "});",
                    "",
                    "// Check if the response is a JSON object when status is 200",
                    "pm.test(\"Response is a JSON object\", function () {",
                    "    if(pm.response.code === 200) {",
                    "        pm.response.to.be.json;",
                    "    }",
                    "});",
                    "",
                    "// Check if the response contains the products and locations arrays when status is 200",
                    "pm.test(\"Response contains products and locations arrays\", function () {",
                    "    if(pm.response.code === 200) {",
                    "        var jsonData = pm.response.json();",
                    "        pm.expect(jsonData).to.have.property('products').that.is.an('array');",
                    "        pm.expect(jsonData).to.have.property('locations').that.is.an('array');",
                    "    }",
                    "});",
                    "",
                    "// Check if the products array is not empty when status is 200",
                    "pm.test(\"Products array is not empty\", function () {",
                    "    if(pm.response.code === 200) {",
                    "        var jsonData = pm.response.json();",
                    "        pm.expect(jsonData.products).to.be.an('array').that.is.not.empty;",
                    "    }",
                    "});",
                    "",
                    "// Check if the locations array is not empty when status is 200",
                    "pm.test(\"Locations array is not empty\", function () {",
                    "    if(pm.response.code === 200) {",
                    "        var jsonData = pm.response.json();",
                    "        pm.expect(jsonData.locations).to.be.an('array').that.is.not.empty;",
                    "    }",
                    "});",
                    "",
                    "// checking if each product in the products array has specific fields when status is 200",
                    "pm.test(\"Each product has required fields\", function(){",
                    "    if(pm.response.code === 200) {",
                    "        var jsonData = pm.response.json();",
                    "        pm.expect(jsonData.products).to.be.an('array').that.is.not.empty;",
                    "        jsonData.products.forEach(function(product){",
                    "            pm.expect(product).to.have.property('product_name');",
                    "            pm.expect(product).to.have.property('selling_price');",
                    "            pm.expect(product).to.have.property('expiry_date');",
                    "            pm.expect(product).to.have.property('description');",
                    "            pm.expect(product).to.have.property('location_id');",
                    "            pm.expect(product).to.have.property('number_of_product_purchased');",
                    "            pm.expect(product).to.have.property('reorder_level');",
                    "            pm.expect(product).to.have.property('selling_price');",
                    "            pm.expect(product).to.have.property('supplier_id');",
                    "            pm.expect(product).to.have.property('supplier_name');",
                    "            pm.expect(product).to.have.property('category');",
                    "        });",
                    "    }",
                    "});",
                    "",
                    "// check if each location in the locations array has specific fields when status is 200",
                    "pm.test(\"Each location has required fields\", function(){",
                    "    if(pm.response.code === 200) {",
                    "        var jsonData = pm.response.json();",
                    "        pm.expect(jsonData.locations).to.be.an('array').that.is.not.empty;",
                    "        jsonData.locations.forEach(function(location){",
                    "            pm.expect(location).to.have.property('zone');",
                    "            pm.expect(location).to.have.property('aisle');",
                    "            pm.expect(location).to.have.property('shelf');",
                    "            pm.expect(location).to.have.property('bin');",
                    "        });",
                    "    }",
                    "});",
                    "",
                    "// checking if location instructions are present or not when both product and locations are available and status is 200",
                    "pm.test(\"Location instructions are present when applicable\", function(){",
                    "    if(pm.response.code === 200) {",
                    "        var jsonData = pm.response.json();",
                    "        if(jsonData.products.length > 0 && jsonData.locations.length > 0){",
                    "            pm.expect(jsonData).to.have.property('location_instructions').that.is.a('string').that.is.not.empty;",
                    "        }",
                    "    }",
                    "});",
                    "",
                    "pm.test(\"Handles invalid input gracefully\", function () {",
                    "    pm.sendRequest({",
                    "        url: \"https://nventory.azurewebsites.net/search?search_term=invalidinput\",",
                    "        method: \"GET\"",
                    "    }, function (err, res) {",
                    "        // Check if the response was received",
                    "        pm.expect(res).to.have.property('code', 200);",
                    "        ",
                    "        var jsonData = res.json();",
                    "        pm.expect(jsonData.products).to.be.an('array').that.is.empty;",
                    "        pm.expect(jsonData.locations).to.be.an('array').that.is.empty;",
                    "    });",
                    "});"
                ],
                "type": "text/javascript"
            }
        },
        {
            "listen": "prerequest",
            "script": {
                "exec": [""],
                "type": "text/javascript"
            }
        }
    ],
    "request": {
        "method": "GET",
        "header": [],
        "url": {
            "raw": "https://nventory.azurewebsites.net/search?search_term=CoolMaster",
            "protocol": "https",
            "host": ["nventory", "azurewebsites", "net"],
            "path": ["search"],
            "query": [
                {"key": "search_term", "value": "CoolMaster"}
            ]
        }
    },
    "response": []
}
