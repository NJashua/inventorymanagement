{
	"info": {
		"_postman_id": "8a62b433-628a-4f85-a960-8e18f72f69aa",
		"name": "InventoryManagement",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "34381864",
		"_collection_link": "https://nj3333.postman.co/workspace/NJ-Workspace~cf2d6870-6eb7-4a66-8bd8-f4405262c93b/collection/34381864-8a62b433-628a-4f85-a960-8e18f72f69aa?action=share&source=collection_link&creator=34381864"
	},
	"item": [
		{
			"name": "TEST",
			"item": [
				{
					"name": "IM search testcase",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Check if the status code is 200",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Check if the response is a JSON object",
									"pm.test(\"Response is a JSON object\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"",
									"// Check if the response contains the products and locations arrays",
									"pm.test(\"Response contains products and locations arrays\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('products').that.is.an('array');",
									"    pm.expect(jsonData).to.have.property('locations').that.is.an('array');",
									"});",
									"",
									"// Check if the products array is not empty",
									"pm.test(\"Products array is not empty\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.products).to.be.an('array').that.is.not.empty;",
									"});",
									"",
									"// Check if the locations array is not empty",
									"pm.test(\"Locations array is not empty\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.locations).to.be.an('array').that.is.not.empty;",
									"});",
									"",
									"// checking if each product in the products array has specific fields",
									"pm.test(\"Each product has required fields\", function(){",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.products).to.be.an('array').that.is.not.empty;",
									"    jsonData.products.forEach(function(product){",
									"        pm.expect(product).to.have.property('product_name');",
									"        pm.expect(product).to.have.property('selling_price');",
									"        pm.expect(product).to.have.property('expiry_date');",
									"        pm.expect(product).to.have.property('description');",
									"        pm.expect(product).to.have.property('location_id');",
									"        pm.expect(product).to.have.property('number_of_product_purchased');",
									"        pm.expect(product).to.have.property('reorder_level');",
									"        pm.expect(product).to.have.property('supplier_id');",
									"        pm.expect(product).to.have.property('supplier_name');",
									"        pm.expect(product).to.have.property('category');",
									"    });",
									"});",
									"",
									"// check if each location in the locations array has specific fields",
									"pm.test(\"Each location has required fields\", function(){",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.locations).to.be.an('array').that.is.not.empty;",
									"    jsonData.locations.forEach(function(location){",
									"        pm.expect(location).to.have.property('zone');",
									"        pm.expect(location).to.have.property('aisle');",
									"        pm.expect(location).to.have.property('shelf');",
									"        pm.expect(location).to.have.property('bin');",
									"    });",
									"});",
									"",
									"// checking if location instructions are present or not when both product and locations are available",
									"pm.test(\"Location instructions are present when applicable\", function(){",
									"    var jsonData = pm.response.json();",
									"    if(jsonData.products.length > 0 && jsonData.locations.length > 0){",
									"        pm.expect(jsonData).to.have.property('location_instructions').that.is.a('string').that.is.not.empty;",
									"    }",
									"});",
									"",
									"// Handle invalid input gracefully",
									"pm.test(\"Handles invalid input gracefully\", function () {",
									"    pm.sendRequest({",
									"        url: \"http://127.0.0.1:5000/search?search_term=invalidinput\",",
									"        method: \"GET\"",
									"    }, function (err, res) {",
									"        pm.expect(res).to.have.property('code', 200);",
									"        var jsonData = res.json();",
									"        pm.expect(jsonData.products).to.be.an('array').that.is.empty;",
									"        pm.expect(jsonData.locations).to.be.an('array').that.is.empty;",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/search?search_term=CoolMaster",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"search"
							],
							"query": [
								{
									"key": "search_term",
									"value": "CoolMaster"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "IM displayproducts testcase",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Extract JSON data from response",
									"var jsonData = pm.response.json();",
									"",
									"// Check if the status code is 200",
									"pm.test(\"Status code is 200\", function(){",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Check if the response contains all expected fields for each product",
									"pm.test(\"Response contains all expected fields for each product\", function(){",
									"    jsonData.forEach(function(product){",
									"        pm.expect(product).to.have.all.keys('supplier_id', 'supplier_name', 'product_name', 'description', 'number_of_product_purchased', 'date_of_purchase', 'category', 'quantity_available', 'unit_cost', 'selling_price', 'reorder_level', 'expiry_date', 'location_id');",
									"    });",
									"});",
									"",
									"// Check if product prices are greater than zero",
									"pm.test(\"Product prices are greater than zero\", function(){",
									"    jsonData.forEach(function(product){",
									"        var price = parseFloat(product.selling_price);",
									"        pm.expect(price).to.be.above(0);",
									"    });",
									"});",
									"",
									"// Check if product descriptions are not too long (maximum length is defined as 5000 characters)",
									"pm.test(\"Product descriptions are not too long (maximum length is 5000 characters)\", function(){",
									"    const maxDescLength = 5000;",
									"    jsonData.forEach(function(product){",
									"        pm.expect(product.description.length).to.be.at.most(maxDescLength);",
									"    });",
									"});",
									"",
									"// Check if all products have non-empty descriptions",
									"pm.test(\"All products have non-empty descriptions\", function(){",
									"    jsonData.forEach(function(product){",
									"        pm.expect(product.description).to.not.be.empty;",
									"    });",
									"});",
									"",
									"// Check if all product names are unique",
									"pm.test(\"All product names are unique\", function(){",
									"    var uniqueNames = new Set();",
									"    jsonData.forEach(function(product) {",
									"        pm.expect(uniqueNames.has(product.product_name)).to.be.false;",
									"        uniqueNames.add(product.product_name);",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/displayproducts",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"displayproducts"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}
