{
    "info": {
        "_postman_id": "8a62b433-628a-4f85-a960-8e18f72f69aa",
        "name": "InventoryMangement",
        "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
        "_exporter_id": "34381864",
        "_collection_link": "https://nj3333.postman.co/workspace/NJ-Workspace~cf2d6870-6eb7-4a66-8bd8-f4405262c93b/collection/34381864-8a62b433-628a-4f85-a960-8e18f72f69aa?action=share&source=collection_link&creator=34381864"
    },
    "item": [
        {
            "name": "TEST",
            "item": [
                {
                    "name": "IM search testcase",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "// Check if the status code is 200",
                                    "pm.test(\"Status code is 200\", function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "",
                                    "// Check if the response is a JSON object",
                                    "pm.test(\"Response is a JSON object\", function () {",
                                    "    pm.response.to.be.json;",
                                    "});",
                                    "",
                                    "// Check if the response contains the products and locations arrays",
                                    "pm.test(\"Response contains products and locations arrays\", function () {",
                                    "    var jsonData = pm.response.json();",
                                    "    pm.expect(jsonData).to.have.property('products').that.is.an('array');",
                                    "    pm.expect(jsonData).to.have.property('locations').that.is.an('array');",
                                    "});",
                                    "",
                                    "// Check if the products array is not empty",
                                    "pm.test(\"Products array is not empty\", function () {",
                                    "    var jsonData = pm.response.json();",
                                    "    pm.expect(jsonData.products).to.be.an('array').that.is.not.empty;",
                                    "});",
                                    "",
                                    "// Check if the locations array is not empty",
                                    "pm.test(\"Locations array is not empty\", function () {",
                                    "    var jsonData = pm.response.json();",
                                    "    pm.expect(jsonData.locations).to.be.an('array').that.is.not.empty;",
                                    "});",
                                    "",
                                    "// checking if each product in the products array has specific fields",
                                    "pm.test(\"Each product has required fields\", function(){",
                                    "    var jsonData = pm.response.json();",
                                    "    pm.expect(jsonData.products).to.be.an('array').that.is.not.empty;",
                                    "    jsonData.products.forEach(function(product){",
                                    "        pm.expect(product).to.have.property('product_name');",
                                    "        pm.expect(product).to.have.property('selling_price');",
                                    "        pm.expect(product).to.have.property('expiry_date');",
                                    "        pm.expect(product).to.have.property('description');",
                                    "        pm.expect(product).to.have.property('location_id');",
                                    "        pm.expect(product).to.have.property('number_of_product_purchased');",
                                    "        pm.expect(product).to.have.property('reorder_level');",
                                    "        pm.expect(product).to.have.property('selling_price');",
                                    "        pm.expect(product).to.have.property('supplier_id');",
                                    "        pm.expect(product).to.have.property('supplier_name');",
                                    "        pm.expect(product).to.have.property('category');",
                                    "    });",
                                    "});",
                                    "",
                                    "// check if each location in the locations array has specific fields",
                                    "pm.test(\"Each location has required fields\", function(){",
                                    "    var jsonData = pm.response.json();",
                                    "    pm.expect(jsonData.locations).to.be.an('array').that.is.not.empty;",
                                    "    jsonData.locations.forEach(function(location){",
                                    "        pm.expect(location).to.have.property('zone');",
                                    "        pm.expect(location).to.have.property('aisle');",
                                    "        pm.expect(location).to.have.property('shelf');",
                                    "        pm.expect(location).to.have.property('bin');",
                                    "    });",
                                    "});",
                                    "",
                                    "// checking if location instructions are present or not when both product and locations are availabale",
                                    "pm.test(\"Location instructions are present when applicable\", function(){",
                                    "    var jsonData = pm.response.json();",
                                    "    if(jsonData.products.length >0 && jsonData.location.length>0){",
                                    "        pm.expect(jsonData).to.have.property('location').that.is.a('string').that.is.not.empty;",
                                    "    }",
                                    "});",
                                    "",
                                    "pm.test(\"Handles invalid input gracefully\", function () {",
                                    "    pm.sendRequest({",
                                    "        url: \"https://nventory.azurewebsites.net/search?search_term=invalidinput\",",
                                    "        method: \"GET\"",
                                    "    }, function (err, res) {",
                                    "        // Check if the response was received",
                                    "        pm.expect(res).to.have.property('code', 200);",
                                    "        ",
                                    "        var jsonData = res.json();",
                                    "        pm.expect(jsonData.products).to.be.an('array').that.is.empty;",
                                    "        pm.expect(jsonData.locations).to.be.an('array').that.is.empty;",
                                    "    });",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        },
                        {
                            "listen": "prerequest",
                            "script": {
                                "type": "text/javascript",
                                "exec": []
                            }
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "header": [],
                        "url": {
                            "raw": "https://nventory.azurewebsites.net/search?search_term=CoolMaster",
                            "protocol": "https",
                            "host": [
                                "nventory",
                                "azurewebsites",
                                "net"
                            ],
                            "path": [
                                "search"
                            ],
                            "query": [
                                {
                                    "key": "search_term",
                                    "value": "CoolMaster"
                                }
                            ]
                        },
                        "description": "Search for products and locations with the term 'CoolMaster'"
                    },
                    "response": []
                }
            ]
        },
        {
            "name": "Product Management",
            "item": [
                {
                    "name": "Create Product",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "// Check if the status code is 201 (Created)",
                                    "pm.test(\"Status code is 201\", function () {",
                                    "    pm.response.to.have.status(201);",
                                    "});",
                                    "",
                                    "// Check if the response is a JSON object",
                                    "pm.test(\"Response is a JSON object\", function () {",
                                    "    pm.response.to.be.json;",
                                    "});",
                                    "",
                                    "// Check if the response contains the newly created product",
                                    "pm.test(\"Response contains the created product\", function () {",
                                    "    var jsonData = pm.response.json();",
                                    "    pm.expect(jsonData).to.have.property('product_name');",
                                    "    pm.expect(jsonData).to.have.property('selling_price');",
                                    "    pm.expect(jsonData).to.have.property('expiry_date');",
                                    "    pm.expect(jsonData).to.have.property('description');",
                                    "    pm.expect(jsonData).to.have.property('location_id');",
                                    "    pm.expect(jsonData).to.have.property('number_of_product_purchased');",
                                    "    pm.expect(jsonData).to.have.property('reorder_level');",
                                    "    pm.expect(jsonData).to.have.property('supplier_id');",
                                    "    pm.expect(jsonData).to.have.property('supplier_name');",
                                    "    pm.expect(jsonData).to.have.property('category');",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "method": "POST",
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\"product_name\":\"CoolMaster 3000\",\"selling_price\":299.99,\"expiry_date\":\"2024-12-31\",\"description\":\"High-performance cooling unit\",\"location_id\":\"loc123\",\"number_of_product_purchased\":50,\"reorder_level\":10,\"supplier_id\":\"sup123\",\"supplier_name\":\"CoolingSuppliers Inc.\",\"category\":\"Cooling Units\"}"
                        },
                        "url": {
                            "raw": "https://nventory.azurewebsites.net/products",
                            "protocol": "https",
                            "host": [
                                "nventory",
                                "azurewebsites",
                                "net"
                            ],
                            "path": [
                                "products"
                            ]
                        },
                        "description": "Create a new product in the inventory"
                    },
                    "response": []
                }
            ]
        },
{
    "name": "Create Location",
    "event": [
        {
            "listen": "test",
            "script": {
                "exec": [
                    "// Check if the status code is 201 (Created)",
                    "pm.test(\"Status code is 201\", function () {",
                    "    pm.response.to.have.status(201);",
                    "});",
                    "",
                    "// Check if the response is a JSON object",
                    "pm.test(\"Response is a JSON object\", function () {",
                    "    pm.response.to.be.json;",
                    "});",
                    "",
                    "// Check if the response contains the newly created location",
                    "pm.test(\"Response contains the created location\", function () {",
                    "    var jsonData = pm.response.json();",
                    "    pm.expect(jsonData).to.have.property('zone');",
                    "    pm.expect(jsonData).to.have.property('aisle');",
                    "    pm.expect(jsonData).to.have.property('shelf');",
                    "    pm.expect(jsonData).to.have.property('bin');",
                    "});"
                ],
                "type": "text/javascript"
            }
        }
    ],
    "request": {
        "method": "POST",
        "header": [
            {
                "key": "Content-Type",
                "value": "application/json"
            }
        ],
        "body": {
            "mode": "raw",
            "raw": "{\"zone\":\"Zone 1\",\"aisle\":\"Aisle 5\",\"shelf\":\"Shelf 3\",\"bin\":\"Bin 12\"}"
        },
        "url": {
            "raw": "https://nventory.azurewebsites.net/locations",
            "protocol": "https",
            "host": [
                "nventory",
                "azurewebsites",
                "net"
            ],
            "path": [
                "locations"
            ]
        },
        "description": "Create a new location in the inventory"
    },
    "response": []
}
    ]
}
}
