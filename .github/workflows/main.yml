name: Build, Deploy, Test, and Notify

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python version
        uses: actions/setup-python@v2
        with:
          python-version: '3.11'

      - name: Create and start virtual environment
        run: |
          python -m venv venv
          source venv/bin/activate

      - name: Install dependencies
        run: pip install -r requirements.txt

      # Optional: Add step to run tests here (PyTest, Django test suites, etc.)

      - name: Zip artifact for deployment
        run: zip -r release.zip ./* -x "venv/*"

      - name: Upload artifact for deployment jobs
        uses: actions/upload-artifact@v3
        with:
          name: python-app
          path: release.zip

  deploy:
    runs-on: ubuntu-latest
    needs: build
    environment:
      name: 'Production'
      url: ${{ steps.deploy-to-webapp.outputs.webapp-url }}
    permissions:
      id-token: write # This is required for requesting the JWT

    steps:
      - name: Download artifact from build job
        uses: actions/download-artifact@v3
        with:
          name: python-app
          path: downloaded-artifacts

      - name: Unzip artifact for deployment
        run: unzip downloaded-artifacts/release.zip -d app

      - name: Login to Azure
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZUREAPPSERVICE_CLIENTID }}
          tenant-id: ${{ secrets.AZUREAPPSERVICE_TENANTID }}
          subscription-id: ${{ secrets.AZUREAPPSERVICE_SUBSCRIPTIONID }}

      - name: Deploy to Azure Web App
        uses: azure/webapps-deploy@v2
        id: deploy-to-webapp
        with:
          app-name: 'nventory'
          slot-name: 'Production'

  test:
    runs-on: ubuntu-latest
    needs: deploy

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '14'

      - name: Install Newman
        run: npm install -g newman

      - name: Run Postman Collection
        run: |
          newman run postman/Inventory_Management.postman_collection.json --reporters cli,json --reporter-json-export results/report.json

      - name: Parse Test Results
        id: parse-results
        run: |
          tests_passed=$(jq '.run.failures | length' results/report.json)
          if [ "$tests_passed" -eq 0 ]; then
            echo "All tests passed."
            echo "::set-output name=tests-passed::true"
          else
            echo "Tests failed."
            echo "::set-output name=tests-passed::false"
          fi

  send-email:
    runs-on: ubuntu-latest
    needs: [deploy, test]

    if: ${{ needs.test.outputs.tests-passed == 'true' }}

    steps:
      - name: Send Email Notification
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.example.com
          server_port: 587
          username: ${{ secrets.EMAIL_USERNAME }}
          password: ${{ secrets.EMAIL_PASSWORD }}
          subject: Postman Test Results and Deployment Status
          body: |
            Hello Team Stars,
            All Postman tests passed, and the deployment was successful.
            Regards,
            Your CI/CD System
          to: burugunithin1@gmail.com
          from: nithinjashua1@gmail.com
          content_type: text/plain
